/*
 * 
 */
package View;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Iterator;

import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.tree.DefaultMutableTreeNode;

import Model.Game;
import Service.JSONService;

import java.awt.Color;
import javax.swing.JTree;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

// TODO: Auto-generated Javadoc
/**
 * The Class Timeline.
 */
public class Timeline extends JFrame {

	/** The Constant serialVersionUID. */
	private static final long serialVersionUID = 1L;
	
	/** The content pane. */
	private JPanel contentPane;

	/**
	 * Launch the application.
	 *
	 * @throws IOException Signals that an I/O exception has occurred.
	 */

	/**
	 * Create the frame.
	 * 
	 * @throws IOException
	 */
	public Timeline() throws IOException {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 463, 555);

		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);

		JMenu mnAddItems = new JMenu("Add Items");
		menuBar.add(mnAddItems);

		JMenuItem mntmAddNewItems = new JMenuItem("Add new items to timeline");

		mnAddItems.add(mntmAddNewItems);
		contentPane = new JPanel();
		contentPane.setBackground(Color.WHITE);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		// add contents to the JPanel

		// initialise Game arraylist and parse through JSON file
		ArrayList<Game> games = new ArrayList<Game>();
		JSONService read = new JSONService();
		String json = read.ReadJSON();
		games = read.MapJSON(json);
		// Use iterator for holding each object while creating nodes
		Iterator iter = games.iterator();

		DefaultMutableTreeNode root = new DefaultMutableTreeNode("Super Mario games year of release");
		int startingYear = 1984;
		int maxYear = 2020;
		for (int i = startingYear; i < maxYear; i++) {
			DefaultMutableTreeNode yearRoot = new DefaultMutableTreeNode(i);
			root.add(yearRoot);
		}
		// Enumerating nodes to create per object
		while (iter.hasNext()) {
			Game t = (Game) iter.next();
			Enumeration children = root.children();
			while (children.hasMoreElements()) {
				DefaultMutableTreeNode node = (DefaultMutableTreeNode) children.nextElement();
				if (t.getGameReleaseYear() == Integer.parseInt(node.toString())) {
					DefaultMutableTreeNode game = new DefaultMutableTreeNode(t.getGameTitle());
					node.add(game);
					//creating sub-nodes and attaching labels for readability
					game.add(new DefaultMutableTreeNode("Platform: " + t.getPlatform()));
					game.add(new DefaultMutableTreeNode("Sold: " + t.getGameNumbersSold()));
					game.add(new DefaultMutableTreeNode("Creator: " + t.getGameCreator()));
					game.add(new DefaultMutableTreeNode("Notes: " + t.getGameNotes()));
				}
			}

		}
		mntmAddNewItems.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {

				try {
					//close just this window instead of all windows
					dispose();

				} catch (Exception j) {
					j.printStackTrace();
				}
			}
		});
		this.getContentPane().setLayout(new BorderLayout());
		JTree tree = new JTree(root);
		this.getContentPane().add(new JScrollPane(tree));
		this.pack();
		this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);

	}
}
